# -*- coding: utf-8 -*-
"""Energy Prediction ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11-wukST57S4JFgCwEklNrp7Pn1igdUOD
"""

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pickle

# Load the dataset (replace with your actual dataset path)
data = pd.read_csv('energydata_complete.csv')  # Make sure this path is correct

# Prepare the feature matrix (X) and the target vector (y)
X = data[['T1', 'RH_1', 'T_out']]  # Example: indoor temperature, humidity, and outdoor temperature
y = data['Appliances']  # Target: energy consumption (binary classification: high/low consumption)

# Split the data into training and testing sets (80% for training, 20% for testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling (Standardize the features)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)  # Fit on training data and transform
X_test = scaler.transform(X_test)  # Use the same scaler to transform test data

# Initialize and train the Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Save the trained model and scaler using Pickle
with open('logistic_regression_model.pkl', 'wb') as model_file:
    pickle.dump(model, model_file)

with open('scaler.pkl', 'wb') as scaler_file:
    pickle.dump(scaler, scaler_file)

print("Model and scaler saved as 'logistic_regression_model.pkl' and 'scaler.pkl'")

pip install scikit-learn

from sklearn.preprocessing import StandardScaler

import streamlit as st
import numpy as np
import pickle
from sklearn.preprocessing import StandardScaler

# Load the pre-trained model and scaler
with open('logistic_regression_model.pkl', 'rb') as model_file:
    model = pickle.load(model_file)

with open('scaler.pkl', 'rb') as scaler_file:
    scaler = pickle.load(scaler_file)

# Set up the title of the app
st.title("Energy Consumption Prediction for Smart Homes")

# Set up the input fields for user data
st.header("Enter the following information:")

T1 = st.number_input("Temperature in Kitchen (T1) (°C)", min_value=-50.0, max_value=50.0, value=22.0)
RH_1 = st.number_input("Humidity in Kitchen (RH_1) (%)", min_value=0.0, max_value=100.0, value=45.0)
T_out = st.number_input("Outdoor Temperature (T_out) (°C)", min_value=-50.0, max_value=50.0, value=15.0)

# Create a button for prediction
if st.button("Predict Energy Consumption"):
    # Prepare the input data for prediction
    input_data = np.array([[T1, RH_1, T_out]])

    # Scale the input data using the loaded scaler
    input_data_scaled = scaler.transform(input_data)

    # Make prediction using the model
    prediction = model.predict(input_data_scaled)

    # Display the predicted energy consumption
    st.write(f"Predicted Energy Consumption: {prediction[0]} Wh")
    st.write("This prediction is based on the provided temperature and humidity values.")